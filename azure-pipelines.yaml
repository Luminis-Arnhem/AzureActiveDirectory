trigger:
    - master
    - release/*

variables:
    - group: Luminis
    - name: artifactName
      value: 'Luminis.AzureActiveDirectory'
    - name: nugetArtifactName
      value: 'Luminis.AzureActiveDirectory.Nuget'
    - name: buildConfiguration
      value: 'Release'

stages:
    - stage: Build
      jobs:
          - job: Build
            displayName: Build Nextpipelab.Library
            pool:
                vmImage: 'ubuntu-18.04'

            steps:
                - task: GitVersion@5
                  displayName: Determine version
                  inputs:
                      additionalArguments: '/output buildserver'
                      configFilePath: 'GitVersion.yml'

                - bash: export
                  displayName: Log all environment vars

                - task: DotNetCoreCLI@2
                  displayName: DotnetCore Build
                  inputs:
                      publishWebProjects: false
                      command: build
                      projects: AzureActiveDirectory.sln
                      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:version=$(GitVersion.FullSemVer)'
                      versioningScheme: byBuildNumber

                - task: DotNetCoreCLI@2
                  displayName: DotnetCore Test
                  inputs:
                      command: test
                      projects: '**/*Test/*.csproj'
                      arguments: '--collect:"Code Coverage"'

                - task: PublishBuildArtifacts@1
                  displayName: publish build artifacts
                  inputs: 
                    pathtoPublish: $(Build.ArtifactStagingDirectory)
                    artifactName: $(artifactName)

                - task: PublishBuildArtifacts@1
                  displayName: Pipeline nuget packages
                  inputs: 
                    pathtoPublish: $(Build.ArtifactStagingDirectory)
                    artifactName: $(nugetArtifactName)

                # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops
                - script: nuget push -ApiKey $(NugetApiKey) -Source "PublicNugetServiceConnection" $(Build.ArtifactStagingDirectory)/**/*.nupkg
                  displayName: push to nuget.org

                # apikey unsupported or invalid
                # - task: NuGetCommand@2
                #   inputs:
                #     command: 'push'
                #     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
                #     nuGetFeedType: 'external'
                #     arguments: -ApiKey $(NugetApiKey)
                #     publishFeedCredentials: 'PublicNugetServiceConnection'

                # fails cannot find feedname
                # - task: NuGetInstaller@0
                #   displayName: install nuget

                # - task: NuGetPublisher@0
                #   inputs:
                #     searchPattern: '$(Build.ArtifactStagingDirectory)/*.nupkg'
                #     nuGetFeedType: 'external'
                #     nuGetAdditionalArgs: 'push'
                #     feedName: 'PublicNugetServiceConnection'
                #     nuGetVersion: '3.3.0'

                # fails it also tries to push snupkg
                # # https://github.com/MicrosoftDocs/azure-devops-docs/issues/7716 reverting to custom command instead of dotnet push due to public apikey issue.
                # - task: DotNetCoreCLI@2
                #   displayName: Push Nuget Package
                #   inputs:
                #     command: custom
                #     custom: nuget
                #     arguments: push $(Build.ArtifactStagingDirectory)/*.nupkg -s https://api.nuget.org/v3/index.json -k $(NugetApiKey)
                #   condition: or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                    
                # fails cannot push to external nuget repos
                #only publish nuget package when it is a master or a release build.
                # - task: DotNetCoreCLI@2
                #   inputs:
                #     command: 'push'
                #     nugetFeedType: 'external'
                #     externalEndPoint: 'PublicNugetServiceConnection'
                #   condition: or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
